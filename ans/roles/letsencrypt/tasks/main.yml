# step 1
- name: Create required directories in /etc/letsencrypt
  file:
    path: "{{ letsencrypt_dir }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
    - account
    - certs
    - csrs
    - keys

# step 2
- name: Generate a LetsEncrypt account key
  shell: "openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}"
  args:
    creates: "{{ letsencrypt_account_key }}"

# step 3
- name: Generate LetsEncrypt private key
  shell: "openssl genrsa 4096 | sudo tee {{ letsencrypt_keys_dir }}/{{ domain_name }}.key"
  args:
    creates: "{{ letsencrypt_keys_dir }}/{{ domain_name }}.key"

# step 4
- set_fact:
    domain_sans: >-
      {% for san in subdomains %}DNS:{{ san }}.{{ domain_name }}{% if not loop.last %},{% endif %}{% endfor %}

# step 5
- name: Read /etc/ssl/openssl.cnf
  slurp:
    src: /etc/ssl/openssl.cnf
  register: openssl_cnf

- name: Generate LetsEncrypt CSR configuration
  copy:
    dest: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.cnf"
    content: |
      {{ openssl_cnf["content"] }}
      [SAN]
      subjectAltName={{ domain_sans }}
    owner: root
    group: root
  register: acme_challenge_cnf

# step 6
- name: Generate LetsEncrypt CSR
  shell: "openssl req -new -sha256 -key {{ letsencrypt_keys_dir }}/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat {{ letsencrypt_csrs_dir }}/{{ domain_name }}.cnf) | sudo tee {{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
  when: acme_challenge_cnf is changed

# step 7
- name: Begin LetsEncrypt challenges
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
    remaining_days: 91
  register: acme_challenge_my_domain

# step 8
- name: Create LetsEncrypt TXT records for challenge
  community.digitalocean.digital_ocean_domain_record:
    state: present
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
    type: TXT
    ttl: 60
    name: "{{ item.key | replace('.' + domain_name, '') }}"
    data: "{{ item.value[0] }}"
  loop: "{{ acme_challenge_my_domain.challenge_data_dns | dict2items }}"
  when: acme_challenge_my_domain is changed
  register: acme_challenge_txt_dns_records

# step 9
- name: Complete LetsEncrypt challenges
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
    data: "{{ acme_challenge_my_domain }}"
  when: acme_challenge_my_domain is changed
  register: acme_challenge_complete
  until: acme_challenge_complete is not failed
  retries: 10
  delay: 10

# step 10
- name: Clean up LetsEncrypt TXT records
  community.digitalocean.digital_ocean_domain_record:
    state: absent
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
    type: TXT
    record_id: "{{ item.id }}"
  loop: "{{ acme_challenge_txt_dns_records }}"
  when: acme_challenge_txt_dns_records is changed
