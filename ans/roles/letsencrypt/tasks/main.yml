# step 1
- name: Load host-specific variables
  include_vars:
    file: "vars/{{ ansible_hostname }}.yml"

- name: Create required directories in /etc/letsencrypt
  file:
    path: "{{ letsencrypt_dir }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=x,o=x
  with_items:
    - account
    - certs
    - csrs
    - keys

# step 2
- name: Generate a LetsEncrypt account key
  shell: "openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}"
  args:
    creates: "{{ letsencrypt_account_key }}"

# step 3
- name: Generate LetsEncrypt private key
  shell: "openssl genrsa 4096 | sudo tee {{ letsencrypt_keys_dir }}/{{ domain_name }}.key"
  args:
    creates: "{{ letsencrypt_keys_dir }}/{{ domain_name }}.key"

# step 4
- set_fact:
    domain_sans: >-
      {% for san in subdomains %}DNS:{{ san }}.{{ domain_name }}{% if not loop.last %},{% endif %}{% endfor %}
  when: subdomains is defined and subdomains | length > 0


# step 5
- name: Read /etc/ssl/openssl.cnf
  slurp:
    src: /etc/ssl/openssl.cnf
  register: openssl_cnf


- name: Generate LetsEncrypt CSR configuration
  copy:
    dest: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.cnf"
    content: |
      {{ openssl_cnf["content"] | b64decode }}
      {% if subdomains is defined and subdomains | length > 0 %}
      [SAN]
      subjectAltName={{ domain_sans }}
      {% endif %}
    owner: root
    group: root
  register: acme_challenge_cnf


# step 6
- name: Generate LetsEncrypt CSR
  shell: >
    openssl req -new -sha256
    -key {{ letsencrypt_keys_dir }}/{{ domain_name }}.key
    -subj "/CN={{ domain_name }}"
    {% if subdomains is defined and subdomains | length > 0 %}
    -reqexts SAN
    {% endif %}
    -config {{ letsencrypt_csrs_dir }}/{{ domain_name }}.cnf
    | sudo tee {{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr
  args:
    executable: /bin/bash
  when: acme_challenge_cnf is changed
# step 7
- name: Begin LetsEncrypt challenges
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
    remaining_days: 91
  register: acme_challenge_my_domain

# step 8 - Delete old LetsEncrypt TXT records
- name: Get existing ACME TXT records
  community.digitalocean.digital_ocean_domain_record_info:
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
  register: existing_acme_records



- name: Dump the result of DigitalOcean domain record info
  debug:
    var: existing_acme_records

- name: Remove old ACME TXT records
  community.digitalocean.digital_ocean_domain_record:
    state: absent
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
    record_id: "{{ item.id }}"
  loop: "{{ existing_acme_records.data.records | selectattr('type', 'equalto', 'TXT') | selectattr('name', 'search', '^_acme-challenge') | list }}"
  loop_control:
    label: "{{ item.name }}"
  when: existing_acme_records is defined

- name: Create LetsEncrypt TXT records for challenge
  community.digitalocean.digital_ocean_domain_record:
    state: present
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
    type: TXT
    ttl: 60
    name: "{{ item.key | regex_replace('\\.' ~ domain_name ~ '$', '') }}"
    data: "{{ item.value[0] }}"
  loop: "{{ acme_challenge_my_domain.challenge_data_dns | dict2items }}"
  when: acme_challenge_my_domain is changed
  register: acme_challenge_txt_dns_records
    
- name: Wait for DNS to propagate
  wait_for:
    timeout: 120
  delegate_to: localhost

- name: Confirm TXT record from public resolver
  shell: dig +short TXT _acme-challenge.{{ domain_name }} @8.8.8.8
  register: dig_result
  changed_when: false

- name: Show TXT record seen by Google DNS
  debug:
    var: dig_result.stdout_lines

# step 9
- name: Complete LetsEncrypt challenges
  acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
    data: "{{ acme_challenge_my_domain }}"
  when: acme_challenge_my_domain is changed
  register: acme_challenge_complete
  until: acme_challenge_complete is not failed
  retries: 10
  delay: 15

# step 10
- name: Clean up LetsEncrypt TXT records
  community.digitalocean.digital_ocean_domain_record:
    state: absent
    oauth_token: "{{ do_token }}"
    domain: "{{ domain_name }}"
    type: TXT
    record_id: "{{ item.result.id }}"
  loop: "{{ acme_challenge_txt_dns_records.results }}"
  when: acme_challenge_txt_dns_records is changed
